@using Placement = MudBlazor.Placement
@using Color = MudBlazor.Color
@using AntDesign.JsInterop
@using Microsoft.AspNetCore.Components.WebAssembly.Infrastructure
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<MudOverlay @bind-Visible="_isLayoverVisible" DarkBackground="true" ZIndex="9999" AutoClose="true">
    <MudCard Style="padding: 10px" Elevation="4">
        <MudStack Row>
            <MudStack>
                <MudSpacer/>
                <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Handyman"></MudIcon>
                <MudSpacer/>
            </MudStack>
            <MudStack>
                <MudText Typo="Typo.h5">This page is under development....</MudText>
                <MudText Typo="Typo.body1">The data displayed might be inaccurate or test data.</MudText>
                <MudSpacer/>
            </MudStack>
        </MudStack>
        <MudStack Row>
            <MudSpacer/>
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" Style="display: flex; position: center" OnClick="() => _isLayoverVisible = false">Close</MudButton>
            <MudSpacer/>
        </MudStack>
    </MudCard>
</MudOverlay>

<div class="d-none d-md-block d-lg-block d-xl-block">
    <MudLayout>
        <MudAppBar Elevation="1" Dense>
            @if (@NavigationManager.Uri.Split("/").Last().Length != 0)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary">@NavigationManager.Uri.Split("/").Last()[0].ToString().ToUpper()@NavigationManager.Uri.Split("/").Last().Substring(1)</MudText>
            }
            <MudSpacer/>
            <MudTooltip Text="@DarkModeText" Placement="Placement.Bottom" Color="Color.Primary">
                <MudToggleIconButton Toggled="_isLightMode" Icon="@Icons.Material.Filled.LightMode" ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledChanged="@ToggleTheme" Color="Color.Primary" ToggledColor="Color.Primary"></MudToggleIconButton>
            </MudTooltip>
        </MudAppBar>
        <MudDrawer @bind-Open="@_open" Elevation="1" Variant="@DrawerVariant.Mini">
            @if (_open)
            {
                <MudDrawerHeader Dense>
                    <MudStack Row Style="padding-top: 0">
                        <GHIcon Size="Size.Large"/>
                        <MudText Typo="Typo.h6" Color="Color.Primary" Style="position: absolute; top: 8px;left: 80px">@TitleText</MudText>
                    </MudStack>
                </MudDrawerHeader>
            }
            else
            {
                <MudDrawerHeader Dense>
                    <GHIcon Size="Size.Large"/>
                </MudDrawerHeader>
            }

            <NavMenu IsOpen="@_open"/>
            <MudSpacer/>
            <MudStack Row>
                <MudSpacer/>
                <MudTooltip Text="@DrawerTooltipText" Placement="Placement.Right">
                    <MudToggleIconButton Icon="@Icons.Material.Filled.ArrowRight" ToggledIcon="@Icons.Material.Filled.ArrowLeft" ToggledColor="Color.Primary" Color="Color.Primary" Edge="Edge.Start" ToggledChanged="@ToggleDrawer"/>
                </MudTooltip>
            </MudStack>
        </MudDrawer>
        <MudMainContent Class="pt-16 px-4">
                @Body
                <MudScrollToTop>
                    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowUpward"/>
                </MudScrollToTop>
            </MudMainContent>
    </MudLayout>
</div>
<div class="d-block d-sm-block d-md-none d-lg-none">
    <MudLayout>
        <MudAppBar Elevation="1" Dense>
            @if (@NavigationManager.Uri.Split("/").Last().Length != 0)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary">@NavigationManager.Uri.Split("/").Last()[0].ToString().ToUpper()@NavigationManager.Uri.Split("/").Last().Substring(1)</MudText>
            }
            <MudSpacer/>
            <MudTooltip Text="@DarkModeText" Placement="Placement.Bottom">
                <MudToggleIconButton Icon="@Icons.Material.Filled.LightMode" ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledChanged="@ToggleTheme" Color="Color.Primary" ToggledColor="Color.Primary"></MudToggleIconButton>
            </MudTooltip>
            <GHIconGeneric Size="Size.Medium"/>
        </MudAppBar>
        <BottomNavBar/>
        <MudMainContent Class="pt-16 px-4">
            @Body
            <MudScrollToTop Style="padding-bottom: 45px">
                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowUpward"/>
            </MudScrollToTop>
        </MudMainContent>
    </MudLayout>
</div>

<MudThemeProvider Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@code{
    private bool _open = false;
    public MudTheme _theme = new();
    public bool _isLightMode = true;
    public bool _isLayoverVisible = true;
    public string TitleText { get; set; }
    public string DarkModeText { get; set; } = "Dark Mode";
    public string DrawerTooltipText { get; set; } = "Expand";
    public string BackgroundColor { get; set; } = "#1b2430";

        private const string LIGHT = "light";
        private const string DARK = "dark";

    protected override async Task OnInitializedAsync()
    {
        _isLightMode = await JsRuntime.InvokeAsync<string>("theme") == DARK;
        ToggleTheme();
    }


    private void ToggleTheme()
    {
        _isLightMode = !_isLightMode;
        if (!_isLightMode)
        {
            _theme = GenerateDarkTheme();
            DarkModeText = "Light Mode";
            JsRuntime.InvokeVoidAsync("setSavedTheme", DARK);
            StateHasChanged();
        }
        else
        {
            _theme = GenerateLightTheme();
            DarkModeText = "Dark Mode";
            JsRuntime.InvokeVoidAsync("setSavedTheme", LIGHT);
            StateHasChanged();
        }
        JsRuntime.InvokeVoidAsync("setBodyBackgroundColor");
    }

    private MudTheme GenerateDarkTheme() => new MudTheme
    {
        Palette = new Palette()
        {
            White = "#1b2430",
            Black = "#27282f",
            Background = "#1b2430",
            BackgroundGrey = "rgb(234, 234, 234)",
            Surface = "#1b2430",
            TextPrimary = "rgb(255, 255, 255)",
            TextSecondary = "rgba(0,0,0, 0.50)",
            DrawerText = "#41729f",
            DrawerBackground = "#16213e",
            DrawerIcon = "#bbe1fa",
            AppbarBackground = "#16213e",
            AppbarText = "#bbe1fa",
            Primary = "#bbe1fa",
        }
    };

    private MudTheme GenerateLightTheme() => new MudTheme
    {
        Palette = new Palette()
        {
            White = Colors.Shades.White,
            Black = "#27282f",
            Background = "rgb(255, 255, 255)",
            BackgroundGrey = "rgb(234, 234, 234)",
            Surface = "#ffffff",
            TextPrimary = "rgb(0, 0, 0)",
            TextSecondary = "rgba(0,0,0, 0.50)",
            DrawerText = "#41729f",
            DrawerBackground = "#c3e0e5",
            DrawerIcon = "#274472",
            AppbarBackground = "#c3e0e5",
            AppbarText = "#274472",
            Primary = "#274472"
        }
    };


    void ToggleDrawer()
    {
        _open = !_open;
        TitleText = _open ? "runnerm" : "";
        DrawerTooltipText = _open ? "Collapse" : "Expand";
    }


}